trigger:
  - master

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: azureRegion
    displayName: Azure region
    type: string

  - name: networkResourceGroup
    displayName: Network resource group
    type: string

  - name: openShiftResourceGroup
    displayName: OpenShift resource group
    type: string

  - name: ocpVersion
    displayName: OpenShift version (x.y)
    default: "4.6"

  - name: clusterName
    displayName: Cluster name
    type: string

  - name: baseDomain
    displayName: Base domain
    type: string

  - name: networkName
    displayName: Network name
    type: string

  - name: controlPlaneSubnet
    displayName: Control plane subnet

  - name: computeSubnet
    displayName: Compute node subnet

  - name: sshKey
    displayName: SSH key
    type: string

  - name: pullSecret
    displayName: Red Hat pull secret

steps:
  - task: Bash@3
    displayName: Acquire OpenShift installer
    inputs:
      targetType: "inline"
      script: "curl --location --fail --silent --show-error https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${{ parameters.ocpVersion }}/openshift-install-linux.tar.gz -o openshift-install.tar.gz"
      failOnStderr: true

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: "openshift-install.tar.gz"
      destinationFolder: .
      cleanDestinationFolder: false

  - task: Bash@3
    displayName: Prepare OpenShift install config file
    inputs:
      targetType: "inline"
      script: |
        mkdir ${{ parameters.baseDomain }}
        envsubst < ./installer/install-config.bk.yaml > ./${{ parameters.baseDomain }}/install-config.yaml
        cat ./${{ parameters.baseDomain }}/install-config.yaml
      failOnStderr: true
    env:
      BASE_DOMAIN: "${{ parameters.baseDomain }}"
      CLUSTER_NAME: "${{ parameters.clusterName }}"
      AZURE_REGION: "${{ parameters.azureRegion }}"
      OCP_RG: "${{ parameters.openShiftResourceGroup }}"
      VNET_RG: "${{ parameters.networkResourceGroup }}"
      VNET_NAME: "${{ parameters.networkName }}"
      CONTROL_PLANE_SUBNET: "${{ parameters.controlPlaneSubnet }}"
      COMPUTE_SUBNET: "${{ parameters.computeSubnet }}"
      PULL_SECRET: "${{ variables.ocp-4-pullsecret }}"
      SSH_KEY: "${{ variables.ocp-4-sshkey }}"

  - task: AzureCLI@2
    inputs:
      azureSubscription: "ocp-4-sa-azdo"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        subscriptionId=`az account show | jq .id`
        echo "##vso[task.setvariable variable=subscriptionId;]$subscriptionId"
      addSpnToEnvironment: true

  - task: Bash@3
    displayName: Prepare OpenShift manifest files
    inputs:
      targetType: "inline"
      script: |
        jq --arg key0 'subscriptionId' \
        --arg value0 '${{ variables.subscriptionId }}' \
        --arg key1 'clientId'   \
        --arg value1 '${{ variables.ocp-4-sp-id }}' \
        --arg key2 'clientSecret'  \
        --arg value2 '${{ variables.ocp-4-sp-pq }}' \
        --arg key3 'tenantId' \
        --arg value3 '${{ variables.ocp-4-sp-tid }}' \
        '. | .[$key0]=$value0 | .[$key1]=$value1 | .[$key2]=$value2 | .[$key3]=$value3' <<< {} | tee osServicePrincipal.json
      failOnStderr: true


  - task: Bash@3
    displayName: Prepare OpenShift manifest files
    inputs:
      targetType: "inline"
      script: |
        ./openshift-install create manifests --dir=./${{ parameters.baseDomain }}
        rm -f ./${{ parameters.baseDomain }}/openshift/99_openshift-cluster-api_master-machines-*.yaml
        rm -f ./${{ parameters.baseDomain }}/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
        sed -i 's/mastersSchedulable: true/mastersSchedulable: false/g' ./${{ parameters.baseDomain }}/manifests/cluster-scheduler-02-config.yml
      failOnStderr: true
      
  - task: Bash@3
    displayName: Set infraID variable generated by the installer program
    inputs:
      targetType: "inline"
      script: |
        infraID=`grep -oP "(?<=infrastructureName: ).*" ./cluster-1/manifests/cluster-infrastructure-02-config.yml`
        echo "##vso[task.setvariable variable=infraID;]$infraID"
      failOnStderr: true

  - script: echo $(infraID)
    displayName: "Run a one-line script"

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: "Run a multi-line script"

  - task: AzureCLI@2
    inputs:
      azureSubscription: "ocp-4-sa-azdo"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: "az account show"
      addSpnToEnvironment: true
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
