trigger:
  - master

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: azureRegion
    displayName: Azure region
    type: string

  - name: networkResourceGroup
    displayName: Network resource group
    type: string

  - name: openShiftResourceGroup
    displayName: OpenShift resource group
    type: string

  - name: ocpVersion
    displayName: OpenShift version (x.y)
    default: "4.6"

  - name: clusterName
    displayName: Cluster name
    type: string

  - name: baseDomain
    displayName: Base domain
    type: string

  - name: networkName
    displayName: Network name
    type: string

  - name: controlPlaneSubnet
    displayName: Control plane subnet

  - name: computeSubnet
    displayName: Compute node subnet

variables:
  - group: ocp-4-variable-group

steps:
  - task: Bash@3
    displayName: Acquire OpenShift installer
    inputs:
      targetType: "inline"
      script: "curl --location --fail --silent --show-error https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${{ parameters.ocpVersion }}/openshift-install-linux.tar.gz -o openshift-install.tar.gz"
      failOnStderr: true

  - task: ExtractFiles@1
    displayName: Extract OpenShift installer
    inputs:
      archiveFilePatterns: "openshift-install.tar.gz"
      destinationFolder: .
      cleanDestinationFolder: false

  - task: Bash@3
    displayName: Prepare OpenShift install config file
    inputs:
      targetType: "inline"
      script: |
        mkdir ${{ parameters.clusterName }}
        envsubst < ./installer/install-config.bk.yaml > ./${{ parameters.clusterName }}/install-config.yaml
        cat ./${{ parameters.clusterName }}/install-config.yaml
      failOnStderr: true
    env:
      BASE_DOMAIN: "${{ parameters.baseDomain }}"
      CLUSTER_NAME: "${{ parameters.clusterName }}"
      AZURE_REGION: "${{ parameters.azureRegion }}"
      OCP_RG: "${{ parameters.openShiftResourceGroup }}"
      VNET_RG: "${{ parameters.networkResourceGroup }}"
      VNET_NAME: "${{ parameters.networkName }}"
      CONTROL_PLANE_SUBNET: "${{ parameters.controlPlaneSubnet }}"
      COMPUTE_SUBNET: "${{ parameters.computeSubnet }}"
      PULL_SECRET: $(ocp-4-pullsecret)
      SSH_KEY: $(ocp-4-sshkey)

  - task: AzureCLI@2
    displayName: Get subscriptionId
    inputs:
      azureSubscription: "ocp-4-sa-azdo"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        subscriptionId=`az account show | jq -r -c .id`
        subscriptionId=`az account show | jq -r -c .name`
        echo "##vso[task.setvariable variable=subscriptionId;]$subscriptionId"
        echo "##vso[task.setvariable variable=subscriptionName;]$subscriptionName"
      addSpnToEnvironment: true

  - task: Bash@3
    displayName: Prepare osServicePrincipal.json
    inputs:
      targetType: "inline"
      script: |
        jq --arg key0 'subscriptionId' \
        --arg value0 '$(subscriptionId)' \
        --arg key1 'clientId'   \
        --arg value1 '$(ocp-4-sp-id)' \
        --arg key2 'clientSecret'  \
        --arg value2 '$(ocp-4-sp-pw)' \
        --arg key3 'tenantId' \
        --arg value3 '$(ocp-4-sp-tid)' \
        '. | .[$key0]=$value0 | .[$key1]=$value1 | .[$key2]=$value2 | .[$key3]=$value3' <<< {} | tee osServicePrincipal.json
      failOnStderr: true

  - task: Bash@3
    displayName: Prepare OpenShift manifest files
    inputs:
      targetType: "inline"
      script: |
        ./openshift-install create manifests --dir=./${{ parameters.clusterName }} --log-level error
        rm -f ./${{ parameters.clusterName }}/openshift/99_openshift-cluster-api_master-machines-*.yaml
        rm -f ./${{ parameters.clusterName }}/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
        sed -i 's/mastersSchedulable: true/mastersSchedulable: false/g' ./${{ parameters.clusterName }}/manifests/cluster-scheduler-02-config.yml
      failOnStderr: true
    env:
      AZURE_AUTH_LOCATION: ./osServicePrincipal.json

  - task: Bash@3
    displayName: Get infraId variable
    inputs:
      targetType: "inline"
      script: |
        infraId=`grep -oP "(?<=infrastructureName: ).*" ./${{ parameters.clusterName }}/manifests/cluster-infrastructure-02-config.yml`
        echo "##vso[task.setvariable variable=infraId;]$infraId"
      failOnStderr: true

  - task: Bash@3
    displayName: Create ignition configs
    inputs:
      targetType: "inline"
      script: "./openshift-install create ignition-configs  --dir=./${{ parameters.clusterName }} --log-level error"
      failOnStderr: true

  - task: AzureResourceGroupDeployment@2
    displayName: Deploy user assigned managed identity
    inputs:
      azureSubscription: "$(subscriptionName)"
      #action: 'Create Or Update Resource Group' # Options: create Or Update Resource Group, select Resource Group, start, stop, stopWithDeallocate, restart, deletedeleteRG
      resourceGroupName: ${{ parameters.openShiftResourceGroup }}
      location: ${{ parameters.azureRegion }}
      #templateLocation: 'Linked artifact' # Options: linked Artifact, uRL Of The File
      #csmFileLink: # Required when templateLocation == URL Of The File
      #csmParametersFileLink: # Optional
      csmFile: ./templates/01_identity.json
      #csmParametersFile: # Optional
      #overrideParameters: # Optional
      #deploymentMode: 'Incremental' # Options: Incremental, Complete, Validation
      #enableDeploymentPrerequisites: 'None' # Optional. Options: none, configureVMwithWinRM, configureVMWithDGAgent
      #teamServicesConnection: # Required when enableDeploymentPrerequisites == ConfigureVMWithDGAgent
      #teamProject: # Required when enableDeploymentPrerequisites == ConfigureVMWithDGAgent
      #deploymentGroupName: # Required when enableDeploymentPrerequisites == ConfigureVMWithDGAgent
      #copyAzureVMTags: true # Optional
      #runAgentServiceAsUser: # Optional
      #userName: # Required when enableDeploymentPrerequisites == ConfigureVMWithDGAgent && RunAgentServiceAsUser == True
      #password: # Optional
      #outputVariable: # Optional
      #deploymentName: # Optional
      #deploymentOutputs: # Optional
      #addSpnToEnvironment: false # Optional